<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

<!-- 使用Spring的事务管理器、JDBC 和 Spring的JdbcTemplate -->
<!-- ************************************************begin************************************************* -->
	    <!-- 加载配置文件 ： 告诉spring去哪里获取占位符的配置文件 (spring2.5以后版本)-->
	    <context:property-placeholder location="classpath:config/db.properties" />
	    
<!-- ************************************************end************************************************* -->
    

<!-- ************************************************begin************************************************* -->
	    <!-- 定义数据源 -->
	    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	    
	        <property name="driverClass" 	value="${db.driverClass}" />
	        <property name="jdbcUrl" 		value="${db.jdbcUrl}"     />
	        <property name="user" 			value="${db.userName}"    />
	        <property name="password" 		value="${db.password}"    />
	        
	        <property name="minPoolSize"  	  value="${db.minPoolSize}"     />   <!--连接池中保留的最小连接数。 -->
	        <property name="maxPoolSize"  	  value="${db.maxPoolSize}"     />   <!--连接池中保留的最大连接数。Default: 15 -->
	        <property name="initialPoolSize"  value="${db.initialPoolSize}" />   <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
	        <property name="idleConnectionTestPeriod"  value="${db.idleConnectionTestPeriod}" />  <!--每30秒检查所有连接池中的空闲连接。Default: 0 -->
	        
	    </bean>

	    <!-- 定义事务管理器 -->
	    <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	        <property name="dataSource" ref="dataSource" />
	    </bean>
	    
	    <!-- 启动事务注解 ， 即代码中的@Transactional注解-->
	    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
	    
	    <!-- 配置事务特性 ，配置add、delete和update开始的方法，事务传播特性为required -->
	    <tx:advice id="txAdvice" transaction-manager="transactionManager">
	        <tx:attributes>
<!-- 	            <tx:method name="save*" propagation="REQUIRED" /> -->
<!-- 	            <tx:method name="insert*" propagation="REQUIRED" /> -->
<!-- 	            <tx:method name="delete*" propagation="REQUIRED" /> -->
<!-- 	            <tx:method name="update*" propagation="REQUIRED" /> -->
<!-- 	            <tx:method name="login*" propagation="REQUIRED" /> -->
<!-- 	            <tx:method name="regist*" propagation="REQUIRED" /> -->
<!-- 				<tx:method name="*" read-only="true" /> -->
				<tx:method name="*" propagation="REQUIRED" />
	            <tx:method name="get*" read-only="true" />
	        </tx:attributes>
	    </tx:advice>        
	
	    <!-- 配置那些类的方法进行事务管理 (切面的定义)-->
	    <aop:config>
	        <aop:pointcut id="allManagerMethod" expression="execution (* com.softcreate.service.*.*(..))" ></aop:pointcut>
	        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" ></aop:advisor>
	    </aop:config>
    
 <!-- ************************************************end************************************************* -->
	
<!-- ************************************************begin************************************************* -->
	    <!-- 定义JdbcTemplate (使用spring的JDBC)。  SQL 参数是用占位符 ? 表示,并且受到位置的限制. 定位参数的问题在于, 一旦参数的顺序发生变化, 就必须改变参数绑定. -->
	    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	        <property name="dataSource" ref="dataSource"  />
	    </bean>
	    <!-- 定义namedParameterJdbcTemplate (使用spring的JDBC)。  具名参数: SQL 按名称(以冒号开头)而不是按位置进行指定. 具名参数更易于维护, 也提升了可读性. 具名参数由框架类在运行时用占位符取代     -->
	    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
	        <constructor-arg ref="dataSource" />
	    </bean>
<!-- ************************************************end************************************************* -->
    
</beans>
